name: Deploy to EC2
on:
  push:
    branches:
      - main
env:
  ECR_REPOSITORY: tech-showcase/portfolio
  IMAGE_TAG: latest
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Deploy to EC2
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ubuntu
        EC2_KEY: ${{ secrets.EC2_SSH_KEY }}
      run: |
        echo "$EC2_KEY" > deploy-key
        chmod 400 deploy-key
        scp -i deploy-key -o StrictHostKeyChecking=no docker-compose.yml $EC2_USER@$EC2_HOST:~/docker-compose.yml
        echo "ECR_REGISTRY: $ECR_REGISTRY\nECR_REPOSITORY: $ECR_REPOSITORY\nIMAGE_TAG: $IMAGE_TAG" > .env
        scp -i deploy-key -o StrictHostKeyChecking=no .env $EC2_USER@$EC2_HOST:~/.env
        ssh -i deploy-key -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
          sudo docker compose up -d
        EOF
